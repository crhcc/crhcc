using System.Linq;
using Autodesk.AutoCAD.ApplicationServices;
using Autodesk.AutoCAD.Colors;
using Autodesk.AutoCAD.DatabaseServices;
using Autodesk.AutoCAD.EditorInput;
using Autodesk.AutoCAD.Runtime;
using DotNetARX;
using System.IO;
using System.Data.OleDb;
using System.Data.Odbc;
using System.Data;
using System.Collections;
using System;

namespace Attribute_link
{

    public class Tables
    {
        //private OleDbConnection Conn;
        [CommandMethod("Table2012")]
        public static void AddTable2012()
        {
            Document doc = Application.DocumentManager.MdiActiveDocument;
            Editor ed = doc.Editor;
            string ConnStr = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=C:\\Users\\zxcvb\\Documents\\Visual Studio 2010\\Projects\\Attribute_link\\DLTB.mdb";
            OleDbConnection conn = new OleDbConnection(ConnStr);
            string sql = "select * into [Excel 8.0;database=F:\\DLTB.xlsx].[Sheet1] from [DLTB2]";
            OleDbDataAdapter adapter = new OleDbDataAdapter(sql,conn);
            OleDbCommand com = new OleDbCommand(sql,conn);
            conn.Open();
            com.ExecuteNonQuery(); 
            conn.Close();
            string filePath = "F:\\DLTB.xlsx";//Excel文件名
            //Excel连接字符串 
            string mystring = "Provider = Microsoft.ACE.OLEDB.12.0 ; Data Source = '" + filePath + "';Extended Properties=Excel 8.0;";
            OleDbConnection cnnxls = new OleDbConnection(mystring);
            //选择test.xls中的Sheet1表格，请注意在表格名最后加上$符号
            OleDbDataAdapter myDa = new OleDbDataAdapter("select * from [Sheet1$]", cnnxls);
            DataSet myDs = new DataSet();
            myDa.Fill(myDs);
            System.Data.DataTable dltb = myDs.Tables[0];//获取Sheet1表格所对应的DataTable对象，这样才能进行相关的操作
            //选取Sheet表格中第二行第一列的数据（请注意，DataTable对象认为Excel表格的第一行为表格的标题）
            Database db = HostApplicationServices.WorkingDatabase;
                PromptPointResult ppr=ed.GetPoint("\n请选择表格插入点:");
                if (ppr.Status != PromptStatus.OK) return;
                using (Transaction trans=db.TransactionManager.StartTransaction())
                {
                    ObjectId styleId=AddTableStyle("ColorTable");
                    Table table=new Table();
                    table.TableStyle = styleId;
                    table.Position = ppr.Value;
                    table.SetSize(dltb.Rows.Count + 2, 10);
                    table.SetRowHeight(3);
                    table.SetColumnWidth(15);
                    //table.Cells[0, 0].TextString = "DLTB";
                    //table.Cells[0, 1].TextString = "名字";
                    //table.Cells[0, 2].TextString = "数量";
                    //table.Cells[0, 3].TextString = "缩略图";
                    //table.Cells[0, 4].TextString = "名字";
                    //table.Cells[0, 5].TextString = "数量";
                    //table.Cells[0, 6].TextString = "缩略图";
                    //table.Cells[0, 7].TextString = "名字";
                    //table.Cells[0, 8].TextString = "数量";
                    //table.Cells[0, 9].TextString = "缩略图"; 
                    for(int i =1;i<dltb.Rows.Count;i++)
                    {
                        //设置单元格的文本内容
                        table.Cells[i, 0].TextString = dltb.Rows[i][0].ToString();
                        table.Cells[i, 1].TextString = dltb.Rows[i][1].ToString();
                        table.Cells[i, 2].TextString = dltb.Rows[i][2].ToString();
                        table.Cells[i, 3].TextString = dltb.Rows[i][3].ToString();
                        table.Cells[i, 4].TextString = dltb.Rows[i][4].ToString();
                        table.Cells[i, 5].TextString = dltb.Rows[i][5].ToString();
                        table.Cells[i, 6].TextString = dltb.Rows[i][6].ToString();
                        table.Cells[i, 7].TextString = dltb.Rows[i][7].ToString();
                        table.Cells[i, 8].TextString = dltb.Rows[i][8].ToString();
                        table.Cells[i, 9].TextString = dltb.Rows[i][9].ToString();
                    }
                    db.AddToModelSpace(table);
                    trans.Commit();
                }
            }

            //为当前图形添加一个新的表格样式
            public static ObjectId AddTableStyle(string style)
            {
                ObjectId styleId; // 存储表格样式的Id
                Database db=HostApplicationServices.WorkingDatabase;
                using (Transaction trans=db.TransactionManager.StartTransaction())
                {
                    // 打开表格样式字典
                    DBDictionary dict=(DBDictionary)db.TableStyleDictionaryId.GetObject(OpenMode.ForRead);
                    if (dict.Contains(style)) // 如果存在指定的表格样式
                        styleId = dict.GetAt(style); // 获取表格样式的Id
                    else
                    {
                        TableStyle ts=new TableStyle(); // 新建一个表格样式
                        // 设置表格的标题行为灰色
                        ts.SetBackgroundColor(Color.FromColorIndex(ColorMethod.ByAci, 8), (int)RowType.TitleRow);
                        // 设置表格所有行的外边框的线宽为0.30mm
                        ts.SetGridLineWeight(LineWeight.LineWeight030, (int)GridLineType.OuterGridLines, TableTools.AllRows);
                        // 不加粗表格表头行的底部边框
                        ts.SetGridLineWeight(LineWeight.LineWeight000, (int)GridLineType.HorizontalBottom, (int)RowType.HeaderRow);
                        // 不加粗表格数据行的顶部边框
                        ts.SetGridLineWeight(LineWeight.LineWeight000, (int)GridLineType.HorizontalTop, (int)RowType.DataRow);
                        // 设置表格中所有行的文本高度为1
                        ts.SetTextHeight(1, TableTools.AllRows);
                        // 设置表格中所有行的对齐方式为正中
                        ts.SetAlignment(CellAlignment.MiddleCenter, TableTools.AllRows);
                        dict.UpgradeOpen();//切换表格样式字典为写的状态
                        // 将新的表格样式添加到样式字典并获取其Id
                        styleId = dict.SetAt(style, ts);
                        // 将新建的表格样式添加到事务处理中
                        trans.AddNewlyCreatedDBObject(ts, true);
                        trans.Commit();
                    }
                }
                return styleId; // 返回表格样式的Id
            }
            
        }
    }
